name: Test Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  coverage:
    name: Generate Coverage Report
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Swift Package Cache
      uses: actions/cache@v4
      with:
        path: |
          .build
          ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-swift-coverage-${{ hashFiles('Package.swift', 'Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-swift-coverage-
          ${{ runner.os }}-swift-

    - name: Run Tests with Coverage
      run: |
        # 暫時禁用程式碼覆蓋率以避免 CI 權限問題
        swift test

    - name: Generate Coverage Report
      run: |
        # 建立覆蓋率目錄
        mkdir -p coverage

        # 暫時建立空的覆蓋率報告
        echo "# Coverage disabled due to CI permissions" > coverage/coverage.lcov
        echo "Coverage temporarily disabled in CI environment" > coverage/summary.txt
        echo "📊 Coverage generation skipped due to LLVM Profile permissions"

    - name: Display Coverage Summary
      run: |
        echo "📈 Coverage Summary:"
        cat coverage/summary.txt
        echo "⚠️ Code coverage temporarily disabled due to CI environment limitations"

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/coverage.lcov
        flags: unittests
        name: GitCthulhu-coverage
        fail_ci_if_error: false
        verbose: true

    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-${{ github.sha }}
        path: |
          coverage/
        retention-days: 30

    - name: Comment Coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          try {
            const summary = fs.readFileSync('coverage/summary.txt', 'utf8');
            const lines = summary.split('\n');
            const totalLine = lines.find(line => line.includes('TOTAL'));

            if (totalLine) {
              const coverage = totalLine.split(/\s+/)[3];
              const body = `## 📊 Test Coverage Report

              **Total Coverage: ${coverage}**

              <details>
              <summary>Coverage Details</summary>

              \`\`\`
              ${summary}
              \`\`\`

              </details>

              > Coverage report generated for commit ${context.sha.substring(0, 7)}
              `;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
          } catch (error) {
            console.log('Could not read coverage summary:', error);
          }
